# Step 1: Imports
import pandas as pd
import numpy as np
from sklearn.decomposition import TruncatedSVD
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

# Step 2: Sample user-item ratings data (replace with your own dataset)
data = {
    'user_id': [1, 1, 1, 2, 2, 3, 3, 3, 4, 4],
    'item_id': ['Inception', 'Avengers', 'Interstellar',
                'Inception', 'Avengers',
                'Interstellar', 'Avengers', 'Joker',
                'Joker', 'Inception'],
    'rating': [5, 4, 5, 5, 4, 4, 5, 3, 4, 5]
}
df = pd.DataFrame(data)

# Step 3: Create user-item matrix
user_item_matrix = df.pivot_table(index='user_id', columns='item_id', values='rating').fillna(0)
print("User-Item Matrix:\n", user_item_matrix)

# Step 4: Train-test split at rating level
train_df, test_df = train_test_split(df, test_size=0.2, random_state=42)

# Create train matrix
train_matrix = train_df.pivot_table(index='user_id', columns='item_id', values='rating').fillna(0)

# Step 5: Matrix factorization with TruncatedSVD
svd = TruncatedSVD(n_components=2, random_state=42)
user_factors = svd.fit_transform(train_matrix)
item_factors = svd.components_

# Reconstruct the matrix (predicted ratings)
predicted_ratings = np.dot(user_factors, item_factors)

# Convert predicted ratings back to DataFrame
pred_df = pd.DataFrame(predicted_ratings, index=train_matrix.index, columns=train_matrix.columns)

# Step 6: Evaluation on test set
def get_predicted_rating(user, item):
    try:
        return pred_df.loc[user, item]
    except KeyError:
        return np.nan  # Missing user/item

test_df['predicted_rating'] = test_df.apply(lambda row: get_predicted_rating(row['user_id'], row['item_id']), axis=1)
test_df = test_df.dropna(subset=['predicted_rating'])

rmse = np.sqrt(mean_squared_error(test_df['rating'], test_df['predicted_rating']))
print(f"\nTest RMSE: {rmse:.4f}")

# Step 7: Recommendation Function - Recommend top N items for a given user
def recommend_items(user_id, n=3):
    if user_id not in pred_df.index:
        return f"No data for user {user_id}"
    
    user_ratings = pred_df.loc[user_id]
    # Exclude items already rated by user in train set
    items_rated = train_matrix.loc[user_id]
    unrated_items = user_ratings[items_rated == 0]
    
    recommendations = unrated_items.sort_values(ascending=False).head(n)
    return recommendations

# Step 8: Show recommendations for user 1
print("\nTop 3 Recommendations for User 1:")
print(recommend_items(1))
